generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model permission {
  id             String           @id @default(uuid())
  name           String
  code           String           @unique
  is_deleted     Boolean          @default(false)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  created_by     String
  updated_by     String
  permission_role permission_role[]
}

model role {
  id             String           @id @default(uuid())
  name           String
  code           String           @unique
  is_deleted     Boolean          @default(false)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  created_by     String
  updated_by     String
  RolePermission permission_role[]
}

model permission_role {
  permission_id String
  role_id       String
  is_deleted    Boolean    @default(false)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now())
  created_by    String
  updated_by    String
  permission   permission @relation(fields: [permission_id], references: [id])
  role          role       @relation(fields: [role_id], references: [id])

  @@id([permission_id, role_id])
}

model user {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  name       String?
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  created_by String
  updated_by String
  posts      post[]
  profile    profile?
}

model profile {
  id         Int      @id @default(autoincrement())
  bio        String
  userId     Int      @unique
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  created_by String
  updated_by String
  user       user     @relation(fields: [userId], references: [id])
}

model post {
  id         Int                 @id @default(autoincrement())
  createdAt  DateTime            @default(now())
  title      String
  published  Boolean             @default(false)
  authorId   Int
  is_deleted Boolean             @default(false)
  created_at DateTime            @default(now())
  updated_at DateTime            @default(now())
  created_by String
  updated_by String
  categories categories_posts[]
  author     user                @relation(fields: [authorId], references: [id])
}

model category {
  id         Int                 @id @default(autoincrement())
  name       String
  is_deleted Boolean             @default(false)
  created_at DateTime            @default(now())
  updated_at DateTime            @default(now())
  created_by String
  updated_by String
  posts      categories_posts[]
}

model categories_posts {
  postId      Int
  categoryId  Int
  assigned_at DateTime @default(now())
  assigned_by String
  category    category @relation(fields: [categoryId], references: [id])
  post        post     @relation(fields: [postId], references: [id])

  @@id([postId, categoryId])
}
